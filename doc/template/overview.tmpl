<h2><b>Online Documentation</b> </h2>
<div id="overview" class="summary description">

  <h2>Introduction</h2>
  <p>
    Node-config is a configuration system for Node.js application server
    deployments.  It lets you define a default set of application parameters,
    and tune them for different deployment environments (development, qa,
    staging, production, etc.).
  </p>

  <h2>Project Guidelines</h2>
  <ul>
    <li>Simple - Get started fast</li>
    <li>Predictable - Well tested and stable</li>
    <li>Flexible - Reasonable defaults & hackable</li>
    <li>Powerful - For multi-node enterprise deployment</li>
    <li>Lightweight - Small memory and download footprint</li>
    <li>Stable - Foundation for module developers</li>
  </ul>

  <h2>Getting Started</h2>
  <p>
    See the quick-start guide hosted on <a href="https://github.com/lorenwest/node-config">github</a>
  </p>

  <h2>Configuration Files</h2>
  <p>
    Node-config reads configuration files stored in the directory specified by
    the <i>NODE_CONFIG_DIR</i> environment variable, which defaults to the <i>config</i>
    directory under the process current working directory.  Configuration files can be
    in JavaScript format, JSON format, COFFEE format, or YAML format - whichever you prefer.
  </p>
  <p>
    Configuration files in the config directory are loaded in the following order:
  </p>
  <pre>
    default.EXT
    <i>hostname</i>.EXT
    <i>deployment</i>.EXT
    <i>hostname</i>-<i>deployment</i>.EXT
    local.EXT
    local-<i>deployment</i>.EXT
  </pre>
  <p>
    Where EXT can be .yml, .yaml, .coffee, .json, or .js depending on the format you prefer.
    NOTE: If you use .yml, .yaml, or .coffee file extensions, the 'js-yaml' or 'coffee-script'
    modules must be available.  These external dependencies are not included from
    this package.
  </p>
  <p>
    <i>hostname</i> is the \$HOST environment variable if set, otherwise the \$HOSTNAME
    environment variable if set, otherwise the hostname found from
    require('os').hostname(). Once a hostname is found, everything from the
    first period ('.') onwards is removed. For example, abc.example.com becomes abc
  </p>
  <p>
    <i>deployment</i> is the deployment type, found in the \$NODE_ENV environment
    variable.  Defaults to 'development'.
  </p>

  <h2>File Comments</h2>
  <p>
    Javascript-style comments are stripped out of files before parsing,
    regardless of the file format type.
  </p>

  <h2>File Formats</h2>
  <p>
    JSON files (.json) expose configuration parameters as a JSON object.
    Example:
  </p>
  <pre>
  /* Customer parameters
   *
   * This controls database access and legacy system synchronization
   */
  {
    "Customer": {
      "dbName": "customers",
      "dbHost": "localhost",
      "dbPort": 5984
      // Database synchronization frequency
      "syncFrequency": 60
    }
  }
  </pre>
  <p>
  </p>

  <p>
    JavaScript files (.js) expose configuration parameters as module.exports.  Example:
  </p>
  <pre>
  module.exports = {
    Customer: {
      dbName: "customers",
      dbHost: "localhost",
      dbPort: 5984,
      creditLimit: 600 // Default initial credit limit
    }
  }
  </pre>

  <p>
    YAML files (.yaml or .yml) expose configuration parameters in YAML format.  Example:
  </p>
  <pre>
  Customer:
      dbName: customers
      dbHost: localhost
      dbPort: 5984
      creditLimit: 600
  </pre>

  <p>
    Coffee-script files (.coffee) expose configuration parameters in coffee-script format.  Example:
  </p>
  <pre>
  module.exports =
    Customer:
      dbName: "customers"
      dbHost: "localhost"
      dbPort: 5984
      creditLimit: 600
  </pre>

  <h2>Multiple Instance Configuration</h2>
  <p>
    When running multiple instances of your application, you may specify the
    <i>\$NODE_APP_INSTANCE</i> environment variable prior to running
    your app. If set, this variable should contain an identifier for
    the specific instance of your app on this server, or within the network.
  </p>
  <p>
    Configuration files appended with this identifier will be loaded after
    the configuration file without the instance identifier.
  </p>
  <p>
    Example:
  </p>
  <pre>
    $ export NODE_ENV=staging
    $ export NODE_APP_INSTANCE=3
    $ node myApp.js
  </pre>
  <p>
    This instructs node-config to load <i>default-3.json</i> (if present)
    immediately after <i>default.json</i>, and <i>staging-3.json</i> after
    <i>staging.json</i>.
  </p>
  <p>
    All configuration files follow this pattern, allowing your application
    to specify instance-specific configurations at any level.
  </p>

  <h2>Environment Variable Configurations</h2>
  <p>
    If the \$NODE_CONFIG environment variable is set, it must be a valid
    JSON string containing configuration overrides.  These are applied
    after configuration files have been loaded.
  </p>
  <p>
    For example, setting <i>\$NODE_CONFIG={"Customer":{"dbPort":5984}}</i> will set
    the CONFIG.Customer.dbPort variable, overriding file configurations.
  </p>

  <h2>Command Line Alternatives to Environment Variables</h2>
  <p>
    All environment variables described above may also be supplied on the command
    line.
  </p>
  <p>
    Example:
  </p>
  <pre>
    $ node myApp.js --NODE_ENV=staging --NODE_APP_INSTANCE=3 '--NODE_CONFIG={"Customer":{"dbPort":5984}}'
  </pre>
  <p>
    The format must be two dashes followed by the environment variable name,
    an equals sign, and the value (as in the example above).
  </p>

  <h2>For Module Developers</h2>
  <p>
    Module developers can use node-config to define module specific
    configuration parameters, and offer the same multiple
    deployment capability as the local application.
  </p>
  <p>
    Node.js modules don't live in the same directory as the application, so
    a different mechanism is offered to specify your default configuration.
  </p>
  <p>
    The <a href="Config.html#method_setModuleDefaults">setModuleDefaults</a>
    method creates an object (named after the module) within the CONFIG object
    containing all module configuration parameters, and their defaults.
  </p>
  <p>
    Example:
  </p>
  <pre>
    var CONFIG = require("config");
    CONFIG.setModuleDefaults("MyModule", {
      templateName: "t-50",
      colorScheme: "green"
    });
  </pre>
  <p>
    Users of your module may override your defaults in their config/defaults
    file, or any of their deployment-specific configuration files.
  </p>

  <p style="text-align:right; padding-bottom:0; font-size:93%;">
    Online docs built by <a href="http://developer.yahoo.com/yui/yuidoc/">yui-doc</a> and hosted by <a href="http://lorenwest.github.com">github</a>.
  </p>

</div>
